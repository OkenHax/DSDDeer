//========== CommonscurrentButtons
string SCRIPT_NAME;
integer CHANNEL;
integer giveDebug=TRUE;
integer giveFeedback=TRUE;
integer listenHandle;
list IDs;
key owner;

list whiteList;

//========== Notecard
string NOTECARD="settings";
key kQuery;
integer current_notecard;
integer iLine;    
//================
integer ASSIGNED_TEXTURE=0x01;
integer ASSIGNED_TINT   =0x02;
integer ASSIGNED_BLEND  =0x04;
integer ASSIGNED_GLOW   =0x08;
integer ASSIGNED_BRIGHT =0x10;
integer ASSIGNED_MASK   =0x20;


list linkList;//[name, [list_of_prims.face]]

list areaList;//[name, [list_of_prims.face]]
list textureGroupList;//[name, [list_of_uuid]]
list textureList;//[name, uuid]
//================
string memoryID; 
string memoryData;
//================
list switchableObjects;//[group_name, current_frame, frame_count, [frames]]
list blacklistMask;

integer lastResendID;
//===========================================================================================================================
//===========================================================================================================================
showFreeMemory(){
    integer freemem = llGetFreeMemory();
    if(llToLower( "Ü" ) == "Ü"){
        integer memory = (integer)((float)freemem * 100.0 / 16384.0);
        debug(llGetScriptName()+" "+(string)memory + "% memory free ("+(string)freemem+" Byte). LSO" );
    }else{
        integer memory = (integer)((float)freemem * 100.0 / 65536.0);
        debug(llGetScriptName()+" "+(string)memory + "% memory free ("+(string)freemem+" Byte). Mono" );
    }
}

debug(string s){
    if(giveDebug) llOwnerSay(s);
}

feedback(string s){
    if(giveFeedback) llOwnerSay(s);
} 

say(string msg){
    llSay(CHANNEL, msg);
}

processCommand(string cmd, string param, key id){
    
    list cmds=llParseString2List(llToLower(cmd), [";"], []);
    list params=llParseString2List(param, [";"], []);
    cmd=llList2String(cmds, 0);
    param=llList2String(params, 0);
    if(cmd=="channel"){
        CHANNEL=(integer)param;
        if(listenHandle!=-1) llListenRemove(listenHandle);
        listenHandle=llListen(CHANNEL, "", NULL_KEY, "");
    }else if(cmd=="id"){
        IDs=llParseString2List(param, [","], []);
    }else if(cmd=="reset"){
        llResetScript();
    }else if(cmd=="memory"){
        showFreeMemory();
    }else if(cmd=="area"){
        areaCtl(llList2List(cmds, 1, -1), params);
    }else if(cmd=="texturegroup"){
        textureCtl(llList2String(cmds, 1), params);
    }else if(cmd=="texture"){
        textureCtl("addtexture", params);
    }else if(cmd=="save"){
        areaCtl([llList2String(cmds, 1)], [param]);
    }else if(cmd=="switchableobject"){
        switchableObjectCtl(llList2String(cmds, 1), params);
    }else if(cmd=="mask"){
        maskCtl(llList2String(cmds, 1), params, id);
    }else if(cmd=="link"){
        linkList+=[llList2String(params, 0), llList2String(params, 1)+","];
    }
}

//===========================================================================================================================
string IDlist2IntegerList(list _IDs, integer allowAlias){
     //Face is stored in the 16 high bits, the prim/link number stored in the 16 low 
    list result;
    
    integer i=0;
    string oldName;
    integer oldNum;
    
    
    while(i<llGetListLength(_IDs)){        
        list l=llParseString2List(llList2String(_IDs, i), ["."], []);
        string currentName=llList2String(l, 0);
        
        if(allowAlias){
            integer linkIndex=llListFindList(linkList, [llList2String(_IDs, i)]);
            if(linkIndex==-1){ //name.face
                linkIndex=llListFindList(linkList, [currentName]);
            }
            
            
            if(linkIndex==-1){ //name.face
                linkIndex=llListFindList(linkList, [currentName+".x"]);
            }            

            if(linkIndex!=-1){ //name.face
                list temp=llParseString2List(llList2String(linkList, linkIndex+1), [","], []); 
                integer j=llGetListLength(temp);
                while(--j>=0){
                    list tempLink=llParseString2List(llList2String(temp, j), ["."], []); 
                    string sTempFace=llList2String(tempLink, 1);
                    if(sTempFace=="x") sTempFace=llList2String(l, 1);
                    if(sTempFace=="") sTempFace="-1";
                    _IDs+=[llList2String(tempLink, 0)+"."+sTempFace];
                }
            }
        }
        
        currentName=llToLower(currentName);
        
        integer currentNum;
        if(currentName!=oldName){ //search prim
            if(currentName=="root"){
                if(llGetNumberOfPrims()>1){
                    currentNum=1;
                }else{
                    currentNum=0;
                }
            }else{
                
                integer j=llGetNumberOfPrims();
                while(j>0){
                    if(llToLower(llGetLinkName(j))==currentName){
                        currentNum=j;
                        j=0; //out of the loop
                    }
                    
                    --j;
                }
                //if(j==0) debug("prim not found:" +currentName);
            }
            
        }else{
            currentNum=oldNum;
        }
        oldName=currentName;
        oldNum=currentNum;
        
        integer iFace;
        
        if(llList2String(l, 1)=="") iFace=-1; //No face explicitely defined
            else iFace=llList2Integer(l, 1);
            
        if(iFace==-1){
            //We add each face separately to workaround the face that we cannot set the alpha without the color ( so we'll need to get each face's color later... )
            integer j=llGetLinkNumberOfSides(currentNum);
            while(--j>=0){
                result+=[( currentNum | (j<<16) )];
            }
            
        }else{
            result+=[( currentNum | (iFace<<16) )];
        } 
            
        ++i; 
    }
    
    return llDumpList2String(result, ",");
}
//===========================================================================================================================
maskCtl(string cmd, list params, key id){
    string name=llList2String(params, 0);    
    list areas=areaToObjects(name);
    
    integer resendID=llList2Integer(params, 1);
    if(cmd=="repush"){
        if((resendID==0) || (resendID==lastResendID)) cmd="push";
    }    
        
    if(cmd=="blacklist"){ 
        blacklistMask+=llParseString2List(name, [","], []);
    
    }else if(cmd=="push"){
        if(llListFindList(whiteList, [id])==-1){
            whiteList+=id;
            if(llGetListLength(whiteList)>32) whiteList=llList2List(whiteList, -32, -1);
        }

        changePrimListStoredValue(areas, CPL_MASK, [1]);       

    }else if(cmd=="pop"){
        changePrimListStoredValue(areas, CPL_MASK, [-1]);        
    
    }else if((cmd=="init") || (cmd=="init")){
        integer i;
        for(i=llGetNumberOfPrims(); i>=0; --i){
            string linkName=llGetLinkName(i);
            if(llListFindList(blacklistMask, [linkName])==-1) changePrimListStoredValue([linkName], CPL_MASK, [0]);
        }
            
    }else if(cmd=="renew"){
        maskCtl("reset", params, id);
        lastResendID=(integer)llFrand(99999999);
        say("all:mask;resend:"+(string)lastResendID);
        
    }else if(cmd=="reset"){
        integer i=llGetNumberOfPrims();
        while(i>=0){
            changePrimListStoredValue([llGetLinkName(i)], CPL_MASK, [0]);
            --i;
        }
    }
}

switchableObjectCtl(string cmd, list params){
    //list switchableObjects;//[group_name, current_frame, frame_count, [frames_name, frame]]
    string groupName=llList2String(params, 0);
    if(cmd=="add"){
        integer indexGroup=llListFindList(switchableObjects, [groupName]);
        if(indexGroup==-1){
            indexGroup=llGetListLength(switchableObjects);
            switchableObjects+=[groupName, -1, 0];
        }
        integer frameCount=llList2Integer(switchableObjects, indexGroup+2);
        list temp=llList2List(switchableObjects, indexGroup+3, indexGroup+3+(frameCount*2));
        
        string frameName=llList2String(params, 1);
        integer indexFrame=llListFindList(temp, [frameName]);
        if(indexFrame==-1){
            switchableObjects=llListInsertList(switchableObjects, [frameName, llList2String(params, 2)], indexGroup+3+(frameCount*2));
            changePrimListStoredValue(areaToObjects(llList2String(params, 2)), CPL_SWITCH, [ 1]);
            switchableObjects=llListReplaceList(switchableObjects, [frameCount+1], indexGroup+2, indexGroup+2);
        } 
          
        
    }else if(cmd=="set"){
        integer indexGroup=llListFindList(switchableObjects, [groupName]);
        if(indexGroup!=-1){
        
            integer currentFrame=llList2Integer(switchableObjects, indexGroup+1);
            
            integer frameCount=llList2Integer(switchableObjects, indexGroup+2);
            list temp=llList2List(switchableObjects, indexGroup+3, indexGroup+3+(frameCount*2));
            
            string frameName=llList2String(params, 1);
            integer indexFrame=llListFindList(temp, [frameName]);
            
            if(indexFrame!=-1){
                if(indexFrame!=currentFrame){
                    if(currentFrame!=-1){                    
                        changePrimListStoredValue(areaToObjects(llList2String(temp, currentFrame+1)), CPL_SWITCH, [ 1]); //Hide old frame
                    }
                    
                    switchableObjects=llListReplaceList(switchableObjects, [indexFrame], indexGroup+1, indexGroup+1); //Update current frame
                    changePrimListStoredValue(areaToObjects(llList2String(temp, indexFrame+1)), CPL_SWITCH, [-1]); //Show new frames
                }  
            }
        }
    }
}
//===========================================================================================================================
integer CPL_UPDATE=0;
integer CPL_MASK  =1;
integer CPL_BLEND =4;
integer CPL_GLOW  =5;
integer CPL_SWITCH=6;
integer CPL_TINT  =7;
integer CPL_BRIGHT=8;
integer CPL_ALPHA =9;
changePrimListStoredValue(list _IDs, integer action, list value){
    integer intValue=llList2Integer(value, 0);
    float floatValue=llList2Float(value, 0);
    integer mask;
    float blend;
    float glow;
    integer switch;
    vector tint;
    integer bright;
    
    integer alphaMode;
    integer alphaCut;
    
    
    list prims;
    if(action==CPL_MASK){
        prims=llParseString2List(IDlist2IntegerList(_IDs, TRUE), [","], []);
    }else{
        prims=llParseString2List(IDlist2IntegerList(_IDs, FALSE), [","], []);
    }
    integer i=llGetListLength(prims);
    while(--i>=0){
        
        integer prim=llList2Integer(prims, i);
        integer face=prim>>16;
        prim=(prim&0xFFFF);
        
        list temp=llGetLinkPrimitiveParams(prim, [PRIM_DESC, PRIM_COLOR, face, PRIM_ALPHA_MODE, face, PRIM_GLOW, face, PRIM_FULLBRIGHT, face]);
        //desc, color, alpha, bright
        
        list desc=llParseString2List(llList2String(temp, 0), [";"], []);
        integer sides=llGetLinkNumberOfSides(prim);
        if(face>=sides) jump loop_continue;
        
        
        if(sides!=(llGetListLength(desc)/5)){ //Initialize
            desc=[];
            while(--sides>=0){
                list temp2=llGetLinkPrimitiveParams(prim, [PRIM_COLOR, sides, PRIM_ALPHA_MODE, sides, PRIM_GLOW, sides]);
                integer mode=llList2Integer(temp2, 2); //Color, blend, alphamode, cutoff, glow
                
                if(mode==PRIM_ALPHA_MODE_NONE) alphaCut=0;
                else if(mode==PRIM_ALPHA_MODE_BLEND) alphaCut=(integer)(llList2Float(temp2, 1)*100.0);
                else alphaCut=llList2Integer(temp2, 3);
                
                //mask; switch; glow; blend; alpha
                desc=[0, 0, (integer)(llList2Float(temp2, 4)*100.0), alphaCut, mode]+desc;
            }
        }
        mask=llList2Integer(desc, (face*5)+0); 
        switch=llList2Integer(desc, (face*5)+1);
        glow=(float)llList2Integer(desc, (face*5)+2)/100.0;
        alphaCut=llList2Integer(desc, (face*5)+3);
        alphaMode=llList2Integer(desc, (face*5)+4);
        
        
        tint=llList2Vector(temp, 1);
        bright=llList2Integer(temp, 6);
        
        /*if(alphaModeE==0){
            alphaMode=PRIM_ALPHA_MODE_NONE;
            alphaCut=0;
        }else if(alphaModeE==-1){
            alphaMode=PRIM_ALPHA_MODE_BLEND;
            alphaCut=0;
        }else{
            alphaCut=alphaModeE;
            alphaMode=PRIM_ALPHA_MODE_MASK;
        }*/
        
        if(action==CPL_MASK){ 
            if(intValue==0){ //Force Mask
                mask=0;
            }else{
                mask+=intValue;
            }
            
        }else if(action==CPL_SWITCH){
            switch+=intValue;
        }else if(action==CPL_GLOW){ 
            glow=floatValue;
        }else if(action==CPL_TINT){
            tint=llList2Vector(value, 0);
        }else if(action==CPL_BRIGHT){
            bright=intValue;
        }else if(action==CPL_BLEND){
            alphaMode=PRIM_ALPHA_MODE_BLEND;
            alphaCut=(integer)(floatValue*100.0);
            
        }else if(action==CPL_ALPHA){
            alphaCut=intValue;
            if(alphaCut==0){
                alphaMode=PRIM_ALPHA_MODE_NONE;
            }else{
                alphaMode=PRIM_ALPHA_MODE_MASK;
            }
        }
        if(mask<0) mask=0;
        if(switch<0) switch=0;
        
        desc=llListReplaceList(desc, [mask, switch, (integer)(glow*100.0), alphaCut, alphaMode], (face*5), (face*5)+4);
        
        if((mask!=0) || (switch!=0)){
            llSetLinkPrimitiveParamsFast(prim, [PRIM_DESC, llDumpList2String(desc, ";"), PRIM_COLOR, face, tint, 0.0, PRIM_GLOW, face, 0.0, PRIM_FULLBRIGHT, face, bright,
                PRIM_ALPHA_MODE, face, alphaMode, alphaCut]);
        }else{
            if(alphaMode==PRIM_ALPHA_MODE_BLEND){
                llSetLinkPrimitiveParamsFast(prim, [PRIM_DESC, llDumpList2String(desc, ";"), PRIM_COLOR, face, tint, alphaCut/100.0, PRIM_GLOW, face, glow, PRIM_FULLBRIGHT, face, bright,
                    PRIM_ALPHA_MODE, face, alphaMode, 0]);
            }else{
                llSetLinkPrimitiveParamsFast(prim, [PRIM_DESC, llDumpList2String(desc, ";"), PRIM_COLOR, face, tint, 1.0, PRIM_GLOW, face, glow, PRIM_FULLBRIGHT, face, bright,
                    PRIM_ALPHA_MODE, face, alphaMode, alphaCut]);
            }
            
            
        }
        
        @loop_continue;
    }
}

changeTexture(list area, list textures, list textureIDs, integer type, list _params){
    list params;    


    integer i=llGetListLength(area);
    while(--i>=0){
        list temp=llParseString2List(llList2String(area, i), ["."], []);

        integer linkNum=findPrim(llList2String(temp, 0));
        if(linkNum!=-1){
            string texture=llList2String(textures, llList2Integer(textureIDs, i%llGetListLength(textureIDs)));
            integer face;
            if(llList2String(temp, 1)==""){
                face=-1;
            }else{
                face=llList2Integer(temp, 1);
            }

            //llOwnerSay("set "+texture+" to "+llList2String(temp, 0)+" "+(string)face);

            if(face==-1){
                integer j=llGetLinkNumberOfSides(linkNum);
                while(--j>=0){
                    params=llGetLinkPrimitiveParams(linkNum, [type, j]);
                    
                    if(type==PRIM_SPECULAR){
                        //string texture, vector repeats, vector offsets, float rot, vector specular_color, integer glossiness, integer environment
                        if(llList2Integer(params, 0)!=-1) params=llListReplaceList(params, [llList2Integer(_params, 0)] ,5 ,5);
                        if(llList2Integer(params, 1)!=-1) params=llListReplaceList(params, [llList2Integer(_params, 1)] ,6 ,6);
                    }
                    
                    llSetLinkPrimitiveParamsFast(linkNum, [type, j, texture]+llList2List(params, 1, -1));
   
                }
                
            }else{
                integer j=face;
                params=llGetLinkPrimitiveParams(linkNum, [type, j]);
                if(type==PRIM_SPECULAR){
                    //string texture, vector repeats, vector offsets, float rot, vector specular_color, integer glossiness, integer environment
                    if(llList2Integer(params, 0)!=-1) params=llListReplaceList(params, [llList2Integer(_params, 0)] ,5 ,5);
                    if(llList2Integer(params, 1)!=-1) params=llListReplaceList(params, [llList2Integer(_params, 1)] ,6 ,6);
                }
                llSetLinkPrimitiveParamsFast(linkNum, [type, j, texture]+llList2List(params, 1, -1));

            }            
        }
    }
}

//===========================================================================================================================
list areaToObjects(string sAreas){
    list result;
    list areas=llParseString2List(sAreas, [","], []);
    
    integer j=llGetListLength(areas);
    while(--j>=0){
        integer index=llListFindList(areaList, [llList2String(areas, j)]);
        if(index!=-1){
            result+=areaToObjects(llList2String(areaList, index+1));
        }else{
            result+=[llList2String(areas, j)];
        }
    }
    
    return result;
}


areaCtl(list cmds, list params){    
    
    //list areaList;//[name, [list_of_prims.face]]
    string cmd=llList2String(cmds, 0);
    string name=llList2String(params, 0);
    integer index=llListFindList(areaList, [name]);
    
    list areas=areaToObjects(name);
    
    if(cmd=="add"){
        if(index==-1){
            index=llGetListLength(areaList);
            areaList+=[name, ""];
        }
        //name, list, assigned, texture, tint, alpha, glow, bright
        areaList=llListReplaceList(areaList, [name, llList2String(params, 1)+","], index, index+1);
        
    }else if(cmd=="texture"){
        integer j=llGetListLength(areas);
        while(--j>=0){
            string texture=llList2String(params, 1);
            index=llListFindList(textureList, [texture]);
            if((index!=-1) && ((index%2)==0)){
                texture=llList2String(textureList, index+1);
            }
            changeTexture([llList2String(areas, j)], [texture], [0], PRIM_TEXTURE, []);
            
        }
        
    }else if(cmd=="ctexture"){
            string pass = llGetOwner(); 
            string data = llList2String(params, 1);
            string decrypt=llXorBase64StringsCorrect(data, llStringToBase64("bca6a0e9-2da0-d509-3895-3504f71768c9"));
            decrypt=llBase64ToString(llXorBase64StringsCorrect(decrypt, llStringToBase64(pass)));
            
            areaCtl(["texture"], [name, decrypt]);
            
    }else if(cmd=="normal"){
        integer j=llGetListLength(areas);
        while(--j>=0){ 
            string texture=llList2String(params, 1);
            index=llListFindList(textureList, [texture]);
            if((index!=-1) && ((index%2)==0)){
                texture=llList2String(textureList, index+1);
            }
            changeTexture([llList2String(areas, j)], [texture], [0], PRIM_NORMAL, []);
            
        }
        
    }else if(cmd=="cnormal"){
            string pass = llGetOwner(); 
            string data = llList2String(params, 1);
            string decrypt=llXorBase64StringsCorrect(data, llStringToBase64("bca6a0e9-2da0-d509-3895-3504f71768c9"));
            decrypt=llBase64ToString(llXorBase64StringsCorrect(decrypt, llStringToBase64(pass)));
            
            areaCtl(["normal"], [name, decrypt, llList2Integer(params, 2), llList2Integer(params, 3)]);
            
    }else if(cmd=="specular"){
        integer specGloss=llList2Integer(params, 2);
        integer specEnv=llList2Integer(params, 3);
        
        integer j=llGetListLength(areas);
        while(--j>=0){
            string texture=llList2String(params, 1);
            index=llListFindList(textureList, [texture]);

            if((index!=-1) && ((index%2)==0)){
                texture=llList2String(textureList, index+1);
            }
            changeTexture([llList2String(areas, j)], [texture], [0], PRIM_SPECULAR, [51,0]);
        }
        
    }else if(cmd=="cspecular"){
            string pass = llGetOwner(); 
            string data = llList2String(params, 1);
            string decrypt=llXorBase64StringsCorrect(data, llStringToBase64("bca6a0e9-2da0-d509-3895-3504f71768c9"));
            decrypt=llBase64ToString(llXorBase64StringsCorrect(decrypt, llStringToBase64(pass)));
            
            areaCtl(["specular"], [name, decrypt]);
                    
    }else if((cmd=="tint") || (cmd=="color")){
        changePrimListStoredValue(areas, CPL_TINT, [(vector)llList2String(params, 1)]);
        
    }else if(cmd=="blend"){
        changePrimListStoredValue(areas, CPL_BLEND, [llList2Float(params, 1)]);
        
    }else if(cmd=="mask"){
        changePrimListStoredValue(areas, CPL_ALPHA, [llList2Float(params, 1)]);
        
    }else if(cmd=="glow"){ 
        changePrimListStoredValue(areas, CPL_GLOW, [llList2Float(params, 1)]);
    
    }else if(cmd=="bright"){
        changePrimListStoredValue(areas, CPL_BRIGHT, [(integer)llList2String(params, 1)]);
    
    }
}

textureCtl(string cmd, list params){
    if(cmd=="add"){
        integer index=llListFindList(textureGroupList, [llList2String(params, 0)]);
        if(index==-1){
            index=llGetListLength(textureGroupList);
            textureGroupList+=[llList2String(params, 0), llList2String(params, 1)];
        }else{
            textureGroupList=llListReplaceList(textureGroupList, [llList2String(params, 0), llList2String(textureGroupList, index+1)+","+llList2String(params, 1)], index, index+1);
        }
    }else if(cmd=="apply"){
        integer index=llListFindList(textureGroupList, [llList2String(params, 0)]);
        if(index!=-1){
            list temp=llParseString2List(llList2String(textureGroupList, index+1), [","], []);
            integer i=llGetListLength(temp);
            while(--i>=0){
                list ll=llParseString2List(llList2String(temp, i), ["="], []);
                string areaName=llList2String(ll, 0);
                
                list l=llParseStringKeepNulls(llList2String(ll, 1), ["/"], []);
                string texture=llList2String(l, 0);
                if(texture!=""){
                    string textureUUID=llList2String(l, 0);
                    areaCtl(["texture"], [areaName, textureUUID]);
                }
                
                string normal=llList2String(l, 1);
                if(normal!=""){
                    string textureUUID=llList2String(l, 1);
                    areaCtl(["normal"], [areaName, textureUUID]);
                }
                
                string specular=llList2String(l, 2);
                if(specular!=""){
                    string textureUUID=llList2String(l, 2);
                    areaCtl(["specular"], [areaName, textureUUID]);
                }
            }
        }
    }else if(cmd=="addtexture"){
        integer index=llListFindList(textureList, [llList2String(params, 0)]);
        if(index==-1){
            index=llGetListLength(textureList);
            textureList+=[llList2String(params, 0), llList2String(params, 1)];
        }else{
            textureList=llListReplaceList(textureGroupList, [llList2String(params, 0), llList2String(textureGroupList, index+1)+","+llList2String(params, 1)], index, index+1);
        }
        
                        
    }
}
 


//===========================================================================================================================
integer findPrim(string name){
    if(name=="root"){
        return (llGetNumberOfPrims()>1);
    }else{
        integer i=llGetNumberOfPrims();
        while(i>=0){            
            if(llGetLinkName(i)==name){
                return i;
            }
            --i;
        }
        return -1;
    }
}

//===========================================================================================================================
//===========================================================================================================================
default
{
    state_entry(){
        //llSetLinkAlpha(LINK_SET, 1.0, ALL_SIDES);
        llSetLinkAlpha(LINK_ROOT, 0.0, ALL_SIDES);
        //llSetLinkPrimitiveParamsFast(LINK_SET, [PRIM_DESC, "", PRIM_ALPHA_MODE, ALL_SIDES, PRIM_ALPHA_MODE_NONE, 0]);
        //llSetLinkPrimitiveParamsFast(LINK_SET, [PRIM_DESC, "0;0;0;100;1;0;0;0;100;1;0;0;0;100;1;0;0;0;100;1;0;0;0;100;1;0;0;0;100;1;0;0;0;100;1;0;0;0;100;1"]);
        llSetLinkPrimitiveParamsFast(LINK_SET, [PRIM_DESC, ""]);
        
        owner=llGetOwner();
        SCRIPT_NAME=llList2String(llParseString2List(llGetScriptName(), [" "], []), 0);
        kQuery = llGetNotecardLine(SCRIPT_NAME+"_"+NOTECARD, iLine);
    }

    changed(integer change){
        if(change & CHANGED_OWNER) llResetScript();
        if(change & CHANGED_INVENTORY) llResetScript(); 
    }
     
    dataserver(key query_id, string data){
        if(query_id == kQuery){
            if(data == EOF){
                state run;
            }else{
                ++iLine;
                kQuery = llGetNotecardLine(SCRIPT_NAME+"_"+NOTECARD, iLine);

                data=llStringTrim(data, STRING_TRIM);
                if((data!="") && (llGetSubString(data, 0,0)!="#")){
                    list l=llParseString2List(data, [":"], []);
                    processCommand(llList2String(l, 0), llList2String(l, 1), NULL_KEY);
                }
            }
        }
    }
}
//===========================================================================================================================
state run
{
    state_entry(){
        listenHandle=llListen(CHANNEL, "", NULL_KEY, "");
        
        showFreeMemory(); 
    }

    changed(integer change){
        if(change&CHANGED_OWNER) llResetScript();
        if(change&CHANGED_LINK) llResetScript();
    }
     
    listen(integer channel, string name, key _id, string message){
        if((llGetOwnerKey(_id)==owner) || (llListFindList(whiteList, [_id])!=-1)){
            
            
            
            list temp=llParseString2List(llStringTrim(message, STRING_TRIM), [":"], []);
            if(llListFindList(IDs, [llList2String(temp, 0)])!=-1){
                processCommand(llList2String(temp, 1), llList2String(temp, 2), _id);
            }
        }
    }

}
